NLP ASSIGNMENT CYK ALGORITHM: ROHAAN ADVANI 111903151

1.	Input File Format: All grammar rules line by line followed by the sentence in last line.

NP -> Det | Nom
Nom -> AP | Nom
AP -> Adv | A
Nom -> book
Nom -> orange
Nom -> man
AP -> heavy
AP -> orange
AP -> tall
Det -> a
Adv -> very
Adv -> extremely
A -> heavy
A -> orange
A -> tall
A -> muscular
a very heavy orange book
 

2.	Rule Extraction: Function that builds the rule dictionary from the input text file and initializes the sentence.
•	1 Parameter – Input List of the lines of input file.
•	Initialize empty Rules Dictionary and Non-Terminals List.
•	Extract Sentence from input file and remove it from input list.
•	Loop over rules.
•	Remove newline characters, spaces.
•	Split rule at ‘->’ and ‘|’ to create cleaned input.
•	Add all not-terminals to not-terminal list.
•	Look for each non terminal in input list all collect all derivations of it to built the following dictionary.

{'AP': [['Adv', 'A'], ['heavy'], ['orange'], ['tall']], 
'Det': [['a']], 'Adv': [['very'], ['extremely']], 
'Nom': [['AP', 'Nom'], ['book'], ['orange'], ['man']], 
'A': [['heavy'], ['orange'], ['tall'], ['muscular']], 
'NP': [['Det', 'Nom']]}

['a', 'very', 'heavy', 'orange', 'book']


3.	CKY Parsing: Function that creates the Parse Table using the CKY Algorithm and checks if sentence is part of grammar.
•	Create empty tables using sets.
•	Start filling table.
•	Iterate to find terminals in rules dictionary and add deriving non-terminals to cells.
•	Iterate to find diagnol non-terminals in table from rules dictionary and add deriving non-terminals to cells.
•	Build Output File.
•	Check if the n-1st column of the 0th row if empty. If not sentence belongs to grammar.

[{'Det'}, set(), set(), {'NP'}, {'NP'}]
[set(), {'Adv'}, {'AP'}, {'Nom'}, {'Nom'}]
[set(), set(), {'AP', 'A'}, {'Nom'}, {'Nom'}]
[set(), set(), set(), {'AP', 'Nom', 'A'}, {'Nom'}]
[set(), set(), set(), set(), {'Nom'}]
Sentence belongs to the language generated by the grammar
